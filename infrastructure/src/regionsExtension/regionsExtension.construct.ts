/*
 *  Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import { Construct } from "constructs";
import { EventBus, Rule } from "aws-cdk-lib/aws-events";
import { Function, Runtime, Tracing } from "aws-cdk-lib/aws-lambda";
import { NodejsFunction, OutputFormat } from "aws-cdk-lib/aws-lambda-nodejs";
import path from "path";
import { RetentionDays } from "aws-cdk-lib/aws-logs";
import { Duration } from "aws-cdk-lib";
import { getLambdaArchitecture } from "@arcade/cdk-common";
import { fileURLToPath } from "url";
import { RESULTS_EVENT_SOURCE, RESULTS_RESULT_CREATED_EVENT, RESULTS_RESULT_UPDATED_EVENT } from "@arcade/events";
import { LambdaFunction } from "aws-cdk-lib/aws-events-targets";
import { Queue } from "aws-cdk-lib/aws-sqs";
import { AnyPrincipal, Effect, PolicyStatement } from "aws-cdk-lib/aws-iam";
import { NagSuppressions } from "cdk-nag";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export interface RegionsExtensionConstructProperties {
	environment: string;
	eventBusName: string;
	regionsApiFunctionArn: string;
}

export class RegionsExtensionModule extends Construct {
	constructor(scope: Construct, id: string, props: RegionsExtensionConstructProperties) {
		super(scope, id);

		const namePrefix = `arcade-${props.environment}`;

		const eventBus = EventBus.fromEventBusName(scope, 'EventBus', props.eventBusName)

		const regionsApiLambda = Function.fromFunctionAttributes(scope, 'RegionsApiFunction', { functionArn: props.regionsApiFunctionArn, sameEnvironment: true });

		// Lambda function that processor schedule queued in SQS
		const eventbridgeLambda = new NodejsFunction(this, 'EventBridgeProcessorLambda', {
			description: 'Regions extension module eventbridge processor',
			entry: path.join(__dirname, '../../../typescript/packages/apps/regions-extension/src/lambda_eventbridge.ts'),
			functionName: `${namePrefix}-regions-extension-eventbridge-processor`,
			runtime: Runtime.NODEJS_20_X,
			tracing: Tracing.ACTIVE,
			memorySize: 512,
			logRetention: RetentionDays.ONE_WEEK,
			timeout: Duration.minutes(1),
			environment: {
				EVENT_BUS_NAME: props.eventBusName,
				REGIONS_API_FUNCTION_NAME: regionsApiLambda.functionName,
			},
			bundling: {
				minify: true,
				format: OutputFormat.ESM,
				target: 'node20.1',
				sourceMap: false,
				sourcesContent: false,
				banner: "import { createRequire } from 'module';const require = createRequire(import.meta.url);import { fileURLToPath } from 'url';import { dirname } from 'path';const __filename = fileURLToPath(import.meta.url);const __dirname = dirname(__filename);",
				externalModules: ['aws-sdk', 'pg-native'],
			},
			depsLockFilePath: path.join(__dirname, '../../../common/config/rush/pnpm-lock.yaml'),
			architecture: getLambdaArchitecture(scope),
		});

		regionsApiLambda.grantInvoke(eventbridgeLambda);

		const resultResourceModifiedRule = new Rule(this, "ResultResourceModifiedRule", {
			eventBus: eventBus,
			eventPattern: {
				detailType: [RESULTS_RESULT_CREATED_EVENT, RESULTS_RESULT_UPDATED_EVENT],
				source: [RESULTS_EVENT_SOURCE],
			},
		})

		const regionsExtensionDLQ = new Queue(this, 'RegionsExtensionDLQ');

		regionsExtensionDLQ.addToResourcePolicy(
			new PolicyStatement({
				sid: 'enforce-ssl',
				effect: Effect.DENY,
				principals: [new AnyPrincipal()],
				actions: ['sqs:*'],
				resources: [regionsExtensionDLQ.queueArn],
				conditions: {
					Bool: {
						'aws:SecureTransport': 'false',
					},
				},
			})
		);

		resultResourceModifiedRule.addTarget(
			new LambdaFunction(eventbridgeLambda, {
				deadLetterQueue: regionsExtensionDLQ,
				maxEventAge: Duration.minutes(5),
				retryAttempts: 2,
			})
		);

		NagSuppressions.addResourceSuppressions(
			[eventbridgeLambda],
			[
				{
					id: 'AwsSolutions-IAM4',
					appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
					reason: 'This policy is the one generated by CDK.',
				},
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Resource::*'],
					reason: 'The resource condition in the IAM policy is generated by CDK, this only applies to xray:PutTelemetryRecords and xray:PutTraceSegments actions.',
				},
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Resource::<regionsApiFunctionArnParameter>:*'],
					reason: 'SQS processor lambda needs to invoke the regions api to retrieve list of polygons by region.',
				}
			],
			true
		);

		NagSuppressions.addResourceSuppressions(
			[regionsExtensionDLQ],
			[
				{
					id: 'AwsSolutions-SQS3',
					reason: 'This is the dead letter queue.',
				},
			],
			true
		);
	};

}
