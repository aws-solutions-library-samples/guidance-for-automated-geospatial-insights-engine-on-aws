import { Stack, StackProps } from 'aws-cdk-lib';
import type { Construct } from 'constructs';
import { StacServerConstruct } from './stacServer.construct.js';
import { NagSuppressions } from 'cdk-nag';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';
import { verifiedPermissionsPolicyStoreIdParameter } from '../shared/verifiedPermissions.construct.js';
import { userPoolClientIdParameter, userPoolIdParameter } from '../shared/cognito.construct.js';

export type StacServerProperties = StackProps & {
	environment: string;
	openSearchEndpoint: string;
	openSearchSecret: string;
};

export const initializerFunctionNameParameter = (environment: string) => `/arcade/${environment}/stacServer/initializerFunctionName`;
export const authorizerFunctionArnParameter = (environment: string) => `/arcade/${environment}/stacServer/authorizerFunctionArn`;
export const authorizerFunctionNameParameter = (environment: string) => `/arcade/${environment}/stacServer/authorizerFunctionName`;

export class StacServerStack extends Stack {
	constructor(scope: Construct, id: string, props: StacServerProperties) {
		super(scope, id, props);

		const cognitoUserPoolId = StringParameter.fromStringParameterAttributes(this, 'userPoolId', {
			parameterName: userPoolIdParameter(props.environment),
			simpleName: false,
		}).stringValue;

		const policyStoreId = StringParameter.fromStringParameterAttributes(this, 'policyStoreId', {
			parameterName: verifiedPermissionsPolicyStoreIdParameter(props.environment),
			simpleName: false,
		}).stringValue;

		const cognitoClientId = StringParameter.fromStringParameterAttributes(this, 'clientId', {
			parameterName: userPoolClientIdParameter(props.environment),
			simpleName: false,
		}).stringValue;

		const init = new StacServerConstruct(this, 'StacServerInitializer', {
			environment: props.environment,
			openSearchEndpoint: props.openSearchEndpoint,
			openSearchSecret: props.openSearchSecret,
			cognitoUserPoolId,
			policyStoreId,
			cognitoClientId,
		});

		new StringParameter(this, 'functionNameParameter', {
			parameterName: initializerFunctionNameParameter(props.environment),
			description: 'function Name of ARCADE Stac server initializer',
			stringValue: init.functionName,
		});

		new StringParameter(this, 'authorizerFunctionArnParameter', {
			parameterName: authorizerFunctionArnParameter(props.environment),
			description: 'function Arn of ARCADE Stac server authorizer',
			stringValue: init.authorizerFunctionArn,
		});

		new StringParameter(this, 'authorizerFunctionNameParameter', {
			parameterName: authorizerFunctionNameParameter(props.environment),
			description: 'function Name of ARCADE Stac server authorizer',
			stringValue: init.authorizerFunctionName,
		});

		NagSuppressions.addResourceSuppressionsByPath(
			this,
			'/StacServerStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource',
			[
				{
					id: 'AwsSolutions-IAM4',
					appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
					reason: 'This policy is the one generated by CDK.',
				},
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Resource::*'],
					reason: 'The resource condition in the IAM policy is generated by CDK, this only applies to xray:PutTelemetryRecords and xray:PutTraceSegments actions.',
				},
			],
			true
		);
	}
}
