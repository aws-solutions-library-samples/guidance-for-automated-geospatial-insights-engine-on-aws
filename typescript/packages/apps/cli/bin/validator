#!/usr/bin/env node

/*
 *  Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */


import conf from 'conf';
import rushlib from '@microsoft/rush-lib';
import fs from 'fs';

import path from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const loadValidatorFunction = () => {
	const config = new conf({
		projectName: 'arcade',
		schema: {
			stacServerPath: {
				type: 'string',
			},
			stacServerApiLambdaFunctionName: {
				type: 'string',
			},
			stacServerIngestionLambdaFunctionName: {
				type: 'string',
			},
			stacServerIngestionTopicArn: {
				type: 'string',
			},
			stacServerOpenSearchEndPoint: {
				type: 'string',
			},
			stacServerOpenSearchAccessPolicy: {
				type: 'string',
			},
			arcadePath: {
				type: 'string',
			},
		},
	});
	let arcadePath = config.get('arcadePath');
	if (!arcadePath) {
		arcadePath = path.join(__dirname, '../../../../../');
	}

	const rushConfiguration = rushlib.RushConfiguration.loadFromDefaultLocation({
		startingFolder: arcadePath,
	});
	const modules = ['@arcade/infrastructure'];
	const [arcadePackage] = modules.map((m) => {
		const moduleConfiguration = rushConfiguration.findProjectByShorthandName(m);
		const validatorLocation = `${moduleConfiguration.projectFolder}/dist/cjs/${process.env.VALIDATOR_MODULE_FILENAME}`;
		if (!fs.existsSync(validatorLocation)) {
			return {};
		}
		return require(validatorLocation);
	});

	global.arcadePackage = arcadePackage;
};

export default loadValidatorFunction;
