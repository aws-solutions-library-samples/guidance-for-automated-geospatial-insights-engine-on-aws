/**
 * This configuration file specifies NPM dependency version selections that affect all projects
 * in a Rush repo.  More documentation is available on the Rush website: https://rushjs.io
 */
{
	"$schema": "https://developer.microsoft.com/json-schemas/rush/v5/common-versions.schema.json",

	/**
	 * A table that specifies a "preferred version" for a given NPM package.  This feature is typically used
	 * to hold back an indirect dependency to a specific older version, or to reduce duplication of indirect dependencies.
	 *
	 * The "preferredVersions" value can be any SemVer range specifier (e.g. "~1.2.3").  Rush injects these values into
	 * the "dependencies" field of the top-level common/temp/package.json, which influences how the package manager
	 * will calculate versions.  The specific effect depends on your package manager.  Generally it will have no
	 * effect on an incompatible or already constrained SemVer range.  If you are using PNPM, similar effects can be
	 * achieved using the pnpmfile.js hook.  See the Rush documentation for more details.
	 *
	 * After modifying this field, it's recommended to run "rush update --full" so that the package manager
	 * will recalculate all version selections.
	 */
	"preferredVersions": {
		/**
		 * When someone asks for "^1.0.0" make sure they get "1.2.3" when working in this repo,
		 * instead of the latest version.
		 */
		"@aws-sdk/client-cognito-identity-provider": "3.556.0",
		"@aws-sdk/client-dynamodb": "3.556.0",
		"@aws-sdk/client-eventbridge": "3.556.0",
		"@aws-sdk/client-s3": "3.556.0",
		"@aws-sdk/client-ssm": "3.556.0",
		"@aws-sdk/client-sso-admin": "3.556.0",
		"@aws-sdk/client-sts": "3.556.0",
		"@aws-sdk/client-sqs": "3.556.0",
		"@aws-sdk/client-lambda": "3.556.0",
		"@aws-sdk/lib-dynamodb": "3.556.0",
		"@aws-sdk/types": "3.535.0",
		"@aws-sdk/util-dynamodb": "3.556.0",
		"@aws-sdk/smithy-client": "3.374.0",
		"@aws-sdk/util-stream-node": "3.374.0",
		"@aws-sdk/util-utf8-node": "3.259.0",
		"@commitlint/cli": "17.7.1",
		"@commitlint/config-conventional": "17.7.0",
		"@fastify/awilix": "5.1.0",
		"@fastify/aws-lambda": "4.0.0",
		"@fastify/cors": "9.0.1",
		"@fastify/env": "4.3.0",
		"@fastify/sensible": "5.5.0",
		"@fastify/swagger": "8.14.0",
		"@fastify/type-provider-typebox": "4.0.0",
		"@rushstack/eslint-config": "3.3.2",
		"@sinclair/typebox": "0.32.22",
		"@tsconfig/node20": "20.1.4",
		"@turf/turf": "6.5.0",
		"@types/aws-lambda": "8.10.137",
		"@types/lodash.chunk": "4.2.9",
		"@types/prettier": "3.0.0",
		"@types/node": "20.12.7",
		"@types/validator": "13.7.17",
		"@typescript-eslint/eslint-plugin": "7.7.0",
		"@typescript-eslint/parser": "7.7.0",
		"awilix": "10.0.2",
		"aws-cdk-lib": "2.137.1",
		"aws-cdk": "2.137.1",
		"aws-lambda": "1.0.7",
		"aws-sdk-client-mock": "4.0.0",
		"aws-xray-sdk": "3.6.0",
		"cdk-nag": "2.28.92",
		"commitlint": "17.7.1",
		"constructs": "10.3.0",
		"custom-resource-helper": "1.0.15",
		"dayjs": "1.11.10",
		"dotenv": "16.4.5",
		"esbuild": "0.20.2",
		"eslint": "9.0.0",
		"fastify-plugin": "4.5.1",
		"fastify": "4.26.2",
		"husky": "8.0.3",
		"just-clone": "6.2.0",
		"jwt-decode": "4.0.0",
		"jwt-encode": "1.0.1",
		"lodash.chunk": "4.2.0",
		"merge-anything": "5.1.7",
		"node-cache": "5.1.2",
		"octokit": "3.2.0",
		"ow": "1.1.1",
		"pactum": "3.6.7",
		"pactum-matchers": "1.1.7",
		"pino-pretty": "11.0.0",
		"pino": "8.20.0",
		"p-limit": "5.0.0",
		"shelljs": "0.8.5",
		"shx": "0.3.4",
		"source-map-support": "0.5.21",
		"tsx": "4.7.2",
		"typescript": "5.4.5",
		"ulid": "2.3.0",
		"vite": "5.2.10",
		"vitest-mock-extended": "1.3.1",
		"vitest": "1.5.2"
	},

	/**
	 * When set to true, for all projects in the repo, all dependencies will be automatically added as preferredVersions,
	 * except in cases where different projects specify different version ranges for a given dependency.  For older
	 * package managers, this tended to reduce duplication of indirect dependencies.  However, it can sometimes cause
	 * trouble for indirect dependencies with incompatible peerDependencies ranges.
	 *
	 * The default value is true.  If you're encountering installation errors related to peer dependencies,
	 * it's recommended to set this to false.
	 *
	 * After modifying this field, it's recommended to run "rush update --full" so that the package manager
	 * will recalculate all version selections.
	 */
	// "implicitlyPreferredVersions": false,

	/**
	 * The "rush check" command can be used to enforce that every project in the repo must specify
	 * the same SemVer range for a given dependency.  However, sometimes exceptions are needed.
	 * The allowedAlternativeVersions table allows you to list other SemVer ranges that will be
	 * accepted by "rush check" for a given dependency.
	 *
	 * IMPORTANT: THIS TABLE IS FOR *ADDITIONAL* VERSION RANGES THAT ARE ALTERNATIVES TO THE
	 * USUAL VERSION (WHICH IS INFERRED BY LOOKING AT ALL PROJECTS IN THE REPO).
	 * This design avoids unnecessary churn in this file.
	 */
	"allowedAlternativeVersions": {
		/**
		 * For example, allow some projects to use an older TypeScript compiler
		 * (in addition to whatever "usual" version is being used by other projects in the repo):
		 */
		// "typescript": [
		//   "~2.4.0"
		// ]
	}
}
